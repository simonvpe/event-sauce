#pragma once
#include <string>
#include <variant>

class GLFWwindow;

namespace opengl {
////////////////////////////////////////////////////////////////////////////////
// opengl::window
////////////////////////////////////////////////////////////////////////////////
struct window
{
  //////////////////////////////////////////////////////////////////////////////
  // Commands
  //////////////////////////////////////////////////////////////////////////////
  struct Create
  {
    int width;
    int height;
    std::string name;
  };

  struct Terminate
  {};

  //////////////////////////////////////////////////////////////////////////////
  // Events
  //////////////////////////////////////////////////////////////////////////////
  struct Created
  {
    GLFWwindow* window;
  };

  struct Terminated
  {};

  struct Error
  {
    std::string description;
  };

  //////////////////////////////////////////////////////////////////////////////
  // State
  //////////////////////////////////////////////////////////////////////////////

  struct state_type
  {
    GLFWwindow* window;
  };

  //////////////////////////////////////////////////////////////////////////////
  // Execute
  //////////////////////////////////////////////////////////////////////////////

  static std::variant<Error, Created> execute(const state_type& state, const Create& cmd);

  static Terminated execute(const state_type& state, const Terminate& cmd);

  //////////////////////////////////////////////////////////////////////////////
  // Apply
  //////////////////////////////////////////////////////////////////////////////

  static state_type apply(const state_type& state, const Created& evt);

  static state_type apply(const state_type& state, const Terminated&);

  static state_type apply(const state_type& state, const Error& evt);
};
}
