#pragma once
#include "window.hpp"
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <optional>
#include <string>
#include <variant>

namespace opengl {
////////////////////////////////////////////////////////////////////////////////
// opengl::process::Render
////////////////////////////////////////////////////////////////////////////////
struct render
{
  //////////////////////////////////////////////////////////////////////////////
  // Commands
  //////////////////////////////////////////////////////////////////////////////

  struct Start
  {};

  struct Finish
  {};

  //////////////////////////////////////////////////////////////////////////////
  // Events
  //////////////////////////////////////////////////////////////////////////////

  struct Started
  {};

  struct Finished
  {};

  struct Error
  {
    std::string description;
  };

  //////////////////////////////////////////////////////////////////////////////
  // State
  //////////////////////////////////////////////////////////////////////////////

  struct state_type
  {
    GLFWwindow* window = nullptr;
  };

  //////////////////////////////////////////////////////////////////////////////
  // Execute
  //////////////////////////////////////////////////////////////////////////////

  static std::variant<Error, Started> execute(const state_type& state, const Start& cmd)
  {
    if (state.window) {
      glClear(GL_COLOR_BUFFER_BIT);
      return Started{};
    }
    return Error{ "No window" };
  }

  static Finished execute(const state_type& state, const Finish& cmd)
  {
    if (state.window) {
      glfwSwapBuffers(state.window);
    }
    return {};
  }

  //////////////////////////////////////////////////////////////////////////////
  // Apply
  //////////////////////////////////////////////////////////////////////////////

  static state_type apply(const state_type& state, const window::Created& evt)
  {
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    return { evt.window };
  }

  static state_type apply(const state_type& state, const window::Terminated& evt)
  {
    return { nullptr };
  }

  //////////////////////////////////////////////////////////////////////////////
  // Process
  //////////////////////////////////////////////////////////////////////////////

  static Start process(const state_type& state, const window::Created& evt)
  {
    return {};
  }

  static Finish process(const state_type& state, const Started& evt)
  {
    return {};
  }

  static std::optional<Start> process(const state_type& state, const Finished& evt)
  {
    if (state.window) {
      return { Start{} };
    }
    return {};
  }
};
}
