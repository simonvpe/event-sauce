#pragma once
#include "startup.hpp"
#include <optional>

namespace render_loop {

struct input
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // COMMANDS
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  struct collect
  {};

  struct terminate
  {};

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // EVENTS
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  struct collected
  {};

  struct terminated
  {};

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // STATE
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  struct state_type
  {
    bool should_terminate = false;
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // EXECUTE
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  static std::optional<collected> execute(const state_type& state, const collect&)
  {
    if (!state.should_terminate) {
      return collected{};
    }
    return std::nullopt;
  }

  static std::optional<terminated> execute(const state_type& state, const terminate& evt)
  {
    if (!state.should_terminate) {
      return terminated{};
    }
    return std::nullopt;
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // APPLY
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  static state_type apply(const state_type& state, const terminated&)
  {
    auto next_state = state;
    next_state.should_terminate = true;
    return next_state;
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // PROCESSES
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  static collect process(const state_type&, const startup::completed&)
  {
    return collect{};
  }
};

}
