#pragma once
#include "../physics/entity.hpp"
#include <immer/vector.hpp>

namespace mesh {
struct cube
{
  using id_type = int;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // COMMANDS
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  struct create
  {
    id_type id;
    physics::entity::id_type entity;
    glm::vec3 size;
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // EVENTS
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  struct created
  {
    id_type id;
    physics::entity::id_type entity;
    glm::vec3 size;
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // STATE
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  struct cube_type
  {
    id_type id;
    physics::entity::id_type entity;
    glm::vec3 size;
  };

  using state_type = immer::vector<cube_type>;

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // EXECUTE
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  static auto execute(const state_type& state, const create& cmd) -> created
  {
    return { cmd.id, cmd.entity, cmd.size };
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // APPLY
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  static auto apply(const state_type& state, const created& cmd) -> state_type
  {
    return state.push_back({ cmd.id, cmd.entity, cmd.size });
  }
};
}
